9) Sobre el BCP se puede afirmar que NO almacena:
a) El valor de los registros de la CPU en el momento en el que el proceso fue interrumpido.
b) La lista de ficheros abiertos por el proceso.
c) La información de planificación (prioridad, estado ..)
D) La pila del proceso.

10)¿Cuántos procesos nuevos crea la sentencia for (i=0; i<3; i++) fork(); ?
a) 7
b) 6
c) 4
d) 3

3) ¿Cuántos procesos se crean cuando se ejecuta el siguiente código incluyendo el proceso inicial que ejecuta el programa principal?\n\nmain() { \nint i, pid, otropid;\npid=fork();\nif(pid)\n\tpid=fork();\nelse\n\totropid=fork();\n}
a) 3 
b) 4 
c) 5 
d) 6 

14) ¿Por qué NO tiene sentido que un proceso preparado pase a bloqueado?
a) No tiene sentido porque si no está en ejecución no puede haber pedido ningún recurso.
b) Pues claro que puede pasar, por ejemplo si otro proceso de mayor prioridad necesita la CPU.
c) Puede ocurrir solamente sí otro proceso le quita una página cuanto pase a ejecución. que va a necesitar en cuanto pase a ejecución.
d) No puede ser, porque el paso a bloqueado se produce cuando el recibe una señal y estas solo se pueden recibir cuando el proceso está en ejecución.

19) El cambio de proceso
a) Añade una nueva entrada a la tabla de procesos.
b) Se produce siempre que termina el quantum de tiempo.
c) Se produce siempre que el proceso pasa del estado bloqueado a preparado
d) Siempre se lleva a cabo cuando ocurre una interrupción de reloj.

4) Interprete el código del programa llamado adios.c (el fichero ejecutable se llama “adios.out”) y determina cuál de las siguientes afirmaciones es VERDADERA:\n\nmain() {\nif( fork() )\n\tprintf('Adios/n');\nelse\n\texeclp('adios.out','adios.out',null)\n\t/*esta llamada ejecuta el fichero adios.out*/\n}
a) Cuando se ejecuta adios.out el resultado será la impresión de “Adios” dos veces por pantalla
b) Cuando se crea un proceso en Unix con un fork(), se crea un bloque de control de proceso para el proceso hijo que se almacena en la imagen del proceso hijo
c) En la creación de procesos en Unix, padre e hijo te comparten las variables globales, por lo que si uno de ellos modifica un valor, éste será modificado también para el otro.
d) Todas las afirmaciones son FALSAS.

5) Cuando un proceso está en el estado Preparado:
a) El proceso no es conocido por el sistema, no existe su BCP
b) Existe BCP para el proceso, que se encuentra a la espera de que se le asigne la CPU.
c) Existe el BCP, pero el identificador del proceso es mayor que el número de procesos que puede soportar el sistema.
d) No existe BCP pero el proceso tiene asignado un identificador.

7) Indicar qué acción NO se produce siempre que se realiza una llamada al sistema desde un proceso:
a) Realizar un cambio de proceso cuando termine de ejecutarse la llamada.
b) Guardar los registros del procesador en el BCP.
c) Cambiar el estado de la CPU de modo usuario a supervisor.
d) Realizar un cambio de contexto.

9) En un sistema de tiempo compartido, varios procesos se ejecutan concurrentemente.
a) Para poder hacerlo sin que un proceso pueda acaparar indefinidamente la CPU, es necesario que haya algún dispositivo (reloj) capaz de generar interrupciones que activen el sistema operativo periódicamente.
b) Dichos procesos deberán incluir el código necesario para avisar al sistema operativo de que ha pasado el tiempo que tenían asignado y debe concederse la CPU al siguiente.
c) El sistema operativo interrumpirá la ejecución del programa activo cuando haya consumido el tiempo que tenía asignado, enviándole una señal.
d) No es necesario ningún mecanismo de los propuestos, puesto que todos los programas, tarde o temprano, terminan por ejecutar una llamada al sistema y el sistema operativo puede aprovechar ese momento para conmutar de proceso.

16) Las llamadas al sistema:
a) Siempre provocan el cambio de estado del proceso que las invoca.
b) Las pueden ejecutar tanto los procesos como los dispositivos hardware
c) Un proceso que esté "En Ejecución” sólo puede invocar una llamada al sistema que no sea bloqueante.
d) Un proceso que esté "Preparado" no puede invocar una llamada al sistema hasta que pase al estado "En Ejecución”

13) En relación con la planificación de procesos: 
A) La política de planificación por “Round-Robin' no genera problemas de inanición. 
b) Cuando no existen procesos en la cola de preparados, la CPU permanece sin ejecutar instrucciones hasta que llegue algún proceso.
c) El algoritmo de colas con retroalimentación consiste en aumentar gradualmente la prioridad de los procesos que están en estado bloqueado.
d) La política de planificación basada en prioridades, tiene en cuenta el tiempo que los procesos han estado en la cola de "Preparados”.

16) Utilizando la planificación Round Robin, ¿Qué cuanto de tiempo favorece a los procesos intensivos en E/S frente a los intensivos en consumo de CPU?
a) un cuanto grande.
B) un cuanto pequeño.
c) un cuanto intermedio,
d) RR trata por igual sin favorecer especialmente a ninguno, con independencia del cuanto.

14) Cuando termina el quantum de tiempo de un proceso se produce la transición entre los estados:
a) de Bloqueado a Suspendido.
b) de en Ejecución a Bloqueado.
C) de en Ejecución a Preparado.
d) de Bloqueado a Preparado.

15) En un sistema con un algoritmo de planificación prioridad al más corto se puede producir un cambio de proceso cuando:
a) El proceso solicita una E/S o termina el proceso.
B) El proceso solicita una E/S, termina el proceso o existe otro proceso preparado con más prioridad.
c) El proceso solicita una E/S, termina el proceso o llegan al sistema más procesos más cortos que el proceso en ejecución actual.
d) El proceso solicita una E/S, termina el proceso o se acaba su cuanto de ejecución.

3) Los algoritmos de planificación de CPU afectan
A) al tiempo total que el proceso pasa en la cola de procesos preparados/listos.
b) al tiempo total que el proceso pasa en la cola de procesos bloqueados.
c) al tiempo total que el proceso pasa bloqueado y suspendido.
d) al tiempo total que el proceso pasa en estado de ejecución.

13) ¿Cuál de las siguientes afirmaciones referentes al planificador a largo plazo es FALSA?
a) El planificador a largo plazo se encarga de controlar el grado de multiprogramación.
b) Es el planificador típico de los sistemas de proceso por lotes.
C) El planificador a largo plazo se encarga de decidir qué procesos de los que están en disco son llevados a memoria principal.
d) El planificador a largo plazo se encarga de decidir a qué proceso se le asignará la CPU.

10) En el algoritmo de planificación de CPU el algoritmo clásico de colas multinivel con retroalimentación:
a) Los procesos permanecen en la misma cola durante el tiempo que dura su ejecución.
b) Todas las colas ejecutan el mismo algoritmo de planificación, cada una con procesos diferentes.
c) Cada cola tiene un conjunto de procesos, y cada proceso tiene su propio algoritmo de planificación.
D) Cada cola puede ejecutar algoritmos diferentes.

11) En un sistema operativo, el planificador a largo plazo determina:
A) El grado de multiprogramación del sistema.
b) De entre los procesos que están esperando la CPU cuál es el siguiente proceso a ejecutar.
c) Los mecanismos para despachar procesos.
d) El que suspende los procesos que están bloqueados porque están esperando una operación de E/S.

12) En un sistema planificado, existe una única tarea T1 para la se ha previsto 10 u.t de ráfaga de
CPU y ha completado hasta el momento 5 u.t. En ese momento llega un nuevo proceso T2 con un tiempo de ráfaga de 6 u.t.
a) Si la planificación es SJF se ejecutará T2
b) Si la planificación es SRT se ejecutará T2.
C) Tanto si se planifica con SJF o SRT se sigue ejecutando T1.
d) Tanto si se planifica con SJF o SRT se ejecutará T2.

3) El tiempo de cambio de contexto:
a) Es inferior entre dos hilos del mismo proceso que entre hilos de procesos distintos.
b) Es constante para dos hilos cualesquiera del sistema operativo.
c) Es mayor cuanto más grande es el cuanto de tiempo, si planificamos con un Round Robin.
d) Es inferior entre dos hilos de procesos distintos que entre hilos del mismo proceso.